version: "3"
networks: 
    backend:
        driver: bridge
volumes:
    mysql:
        driver: local
    pgsql:
        driver: local
    redis:
        driver: local                

services:
    nginx:
        image: ${IMAGE_PREFIX:-code}/nginx
        container_name: ${CONTAINER_PREFIX:-code}nginx        
        build:
            context: ./nginx
            dockerfile: Dockerfile
            args:
                WWWGROUP: '${GID}'
                WWWUSER: '${UID}'
                TIMEZONE: '${TIMEZONE}'
        ports:
            - ${HOST_IP:-0.0.0.0}:80:80
            - ${HOST_IP:-0.0.0.0}:443:443
        networks:
            - backend
        labels:
            - "app=nginx"
        restart: "no" 
        volumes:
            - ${HOST_CODE_PATH}:/var/www
            - ${HOST_DATA_PATH}/nginx/logs:/var/logs   
            - ./nginx/conf:/etc/nginx 
            #- ./nginx/conf/sites-available:/etc/nginx/sites-available
            #- ./nginx/conf/ssl:/etc/nginx/ssl
            #- ./nginx/conf/conf.d:/etc/nginx/conf.d
            #- ./nginx/conf/fastcgi_params:/etc/nginx/fastcgi_params
            #- ./nginx/conf/mime.types:/etc/nginx/mime.types
            #- ./nginx/conf/nginx.conf:/etc/nginx/nginx.conf
            #- ./nginx/conf/scgi_params:/etc/nginx/scgi_params
            #- ./nginx/conf/uwsgi_params:/etc/nginx/uwsgi_params
##### PHP ######
    php81:
        image: ${IMAGE_PREFIX:-code}/php81
        container_name: ${CONTAINER_PREFIX:-code}php81        
        build:
            context: ./php81
            dockerfile: Dockerfile
            args:
                WWWGROUP: '${GID}'
                WWWUSER: '${UID}'
                TIMEZONE: '${TIMEZONE:-UTC}'
        ports:
            - ${HOST_IP:-0.0.0.0}:9081:9000
        networks:
            - backend
        labels:
            - "app=php81"
        restart: "no"
        volumes:
            - ${HOST_CODE_PATH}:/var/www
            - $HOME/.ssh:/home/www/.ssh
            - $HOME/.gitconfig:/home/www/.gitconfig
    php80:
        image: ${IMAGE_PREFIX:-code}/php80
        container_name: ${CONTAINER_PREFIX:-code}php80        
        build:
            context: ./php80
            dockerfile: Dockerfile
            args:
                WWWGROUP: '${GID}'
                WWWUSER: '${UID}'
                TIMEZONE: '${TIMEZONE:-UTC}'
        ports:
            - ${HOST_IP:-0.0.0.0}:9080:9000
        networks:
            - backend
        labels:
            - "app=php80"
        restart: "no"
        volumes:
            - ${HOST_CODE_PATH}:/var/www
            - $HOME/.ssh:/home/www/.ssh
            - $HOME/.gitconfig:/home/www/.gitconfig
    php74:
        image: ${IMAGE_PREFIX:-code}/php74
        container_name: ${CONTAINER_PREFIX:-code}php74        
        build:
            context: ./php74
            dockerfile: Dockerfile
            args:
                WWWGROUP: '${GID}'
                WWWUSER: '${UID}'
                TIMEZONE: '${TIMEZONE:-UTC}'
        ports:
            - ${HOST_IP:-0.0.0.0}:9074:9000
        networks:
            - backend
        labels:
            - "app=php74"
        restart: "no"
        volumes:
            - ${HOST_CODE_PATH}:/var/www
            - $HOME/.ssh:/home/www/.ssh
            - $HOME/.gitconfig:/home/www/.gitconfig                   
### DB ###
    mysql:
        image: ${IMAGE_PREFIX:-code}/mysql80
        container_name: ${CONTAINER_PREFIX:-code}mysql80
        build:
            context: ./mysql80
            args:
                MYSQL_GID: '${GID}'
                MYSQL_UID: '${UID}'
        environment:
            MYSQL_ROOT_PASSWORD: "${MYSQL_ROOT_PASSWORD}"
            MYSQL_USER: "${MYSQL_USER}"
            MYSQL_PASSWORD: "${MYSQL_PASSWORD}"
            TZ: "${TIMEZONE:-UTC}"
        volumes:
            - mysql:/var/lib/mysql
            - ./mysql80/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
            - ./mysql80/conf.d:/etc/mysql/mysql.conf.d
        ports:
            - ${HOST_IP:-0.0.0.0}:3306:3306
        networks:
            - backend
        restart: "no"
    redis:
        image: ${IMAGE_PREFIX:-code}/redis
        container_name: ${CONTAINER_PREFIX:-code}redis
        build:
            context: ./redis
        ports:
            - '${HOST_IP:-0.0.0.0}:${REDIS_HOST_PORT:-6379}:6379'
        volumes:
            - redis:/data
        networks:
            - backend
        healthcheck:
          test: ["CMD", "redis-cli", "ping"]
          retries: 3
          timeout: 5s
        restart: "no"
    pgsql:
        image: ${IMAGE_PREFIX:-code}/pgsql
        container_name: ${CONTAINER_PREFIX:-code}pgsql
        build:
            context: ./pgsql        
        ports:
            - '${PG_FORWARD_PORT:-5432}:5432'
        environment:
            PGPASSWORD: '${PG_PASSWORD:-secret}'
            POSTGRES_DB: '${PG_DATABASE}'
            POSTGRES_USER: '${PG_USERNAME:-homestead}'
            POSTGRES_PASSWORD: '${PG_PASSWORD:-secret}'
        volumes:
            - pgsql:/var/lib/postgresql/data
        networks:
            - backend
        healthcheck:
          test: ["CMD", "pg_isready", "-q", "-d", "${PG_DATABASE}", "-U", "${PG_USERNAME}"]
          retries: 3
          timeout: 5s
        restart: "no"
### Certbot ###############################################
    certbot:
        image: gauralab/certbot
        container_name: ${CONTAINER_PREFIX:-code}certbot        
        networks:
            - backend
        labels:
            - "app=ngincertbotx"
        restart: "no" 
        volumes:
            - ${HOST_DATA_PATH}/certbot/etc:/etc/letsencrypt   
            - ${HOST_DATA_PATH}/certbot/var/lib:/var/lib/letsencrypt   
### Mailhog ###############################################
    mailhog:
        image: gauralab/mailhog
        container_name: ${CONTAINER_PREFIX:-code}mailhog
        networks:
            - backend
        restart: "no"
        ports:
            - '${MAILHOG_SMTP_PORT:-1025}:1025'
            - '${MAILHOG_WEB_PORT:-8025}:8025'
